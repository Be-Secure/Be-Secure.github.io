{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Be-Secure is an umbrella of open source security projects and utilities driven as a community initiative by Wipro. There has been an increase in adoption of open source software by organizations which in turn has led communities to driving newer open source projects. Today open source is the way forward to develop new capabilities by consuming and collaborating with open source community projects. Given the rate of consumption of open source projects, focus on security is important to help consumers to adopt these projects in a seamless manner and enhance / build bigger business capabilities that are more secure by consuming them. The Be-Secure projects are focused on addressing the common security requirements of open source projects. Further customizations on these Be-Secure projects are possible to address specific security requirements. These security projects and utilities will be tracked by Wipro and its network of trusted security partners. This approach will help to build a security community around open source. The security community through collaboration with open source communities can help identify and remediate security issues with a quicker turn around. This focus and collaboration will help secure open source projects and reduce security incidents occurring with open source software components. There are lot many open source tech stacks out there in the world today. An individual will have a wide variety of open source technologies to choose from for their project needs. Each open source technology has its own security stature. Often this may not be factored in while deciding on the tech stack for an open source project. Considerable effort is spent during development phase to address the security issues. This effort can be reduced if the security of open source technologies / open source project is identified and addressed before it is being consumed. As the first stage of Be-Secure projects, the focus is currently set on the most popular open source tech stacks. These tech stacks have been grouped into 5 different open source security tech stack categories. This approach will help to focus and drive security projects/ utilities more efficiently by addressing the specific security requirements of these tech stacks. The different open source security tech stacks that has been identified based on the characteristics and type of usage are \u2013 Security of DevOps Tool stack Language and framework security stack Applications security stack Distributed application / blockchain security stack Open source security tool security stack The vision for Be-Secure community initiative is to be one stop for all interested individuals to contribute and consume security projects to address security needs of open source projects. We hope this initiative will help enable and equip community members to factor in security for their open source projects right from inception thus reducing the effort on addressing security issues due to these projects in the downstream. All source code for Be-Secure projects are in GitHub under Be-Secure Be-Secure Projects/ Utility: BeSman One of the first utilities to be created as part of Be-Secure project is BeSman. BeSman \u2013 is a command-line utility to provision customized environments for each open source tech stack. These environments are known as BeSman environments. We have two types of BeSman environments \u2013 dev and sec environments. The development environment is pre-bundled with all tools and dependencies that a developer would need to work on a specific open source project. Similarly, the sec environments are pre-bundled with a set of open source security tools that a security tester Why do we need BeSman utility: Individuals spend considerable effort to set up and configure the open source project in their local environment to evaluate it / commence working on it. At times individual run into configuration issues or set up issues which results in them spending more effort to resolve them. This is a sizeable effort that is spent just to get the environment up as compared to the effort spent to build newer capability using an existing open source project. This is a lean effort that should be managed in a better way. How can BeSman utility help: BeSman environments are pre-bundled with tools and dependencies for a specific open project and it can be provisioned using simple bash shell commands from BeSman utility. BeSman utility will also provide configurable capabilities that would permit the user to configure the tools and dependencies to be pre-bundled in the environment. Individuals will have complete control into what goes into building and provisioning the environment. The base BeSman environment can be customized further to address specific project needs. This gives lot of flexibility to the developer / security tester to optimize their work environment in a seamless manner.","title":"Home"},{"location":"#be-secure-projects-utility","text":"BeSman One of the first utilities to be created as part of Be-Secure project is BeSman. BeSman \u2013 is a command-line utility to provision customized environments for each open source tech stack. These environments are known as BeSman environments. We have two types of BeSman environments \u2013 dev and sec environments. The development environment is pre-bundled with all tools and dependencies that a developer would need to work on a specific open source project. Similarly, the sec environments are pre-bundled with a set of open source security tools that a security tester Why do we need BeSman utility: Individuals spend considerable effort to set up and configure the open source project in their local environment to evaluate it / commence working on it. At times individual run into configuration issues or set up issues which results in them spending more effort to resolve them. This is a sizeable effort that is spent just to get the environment up as compared to the effort spent to build newer capability using an existing open source project. This is a lean effort that should be managed in a better way. How can BeSman utility help: BeSman environments are pre-bundled with tools and dependencies for a specific open project and it can be provisioned using simple bash shell commands from BeSman utility. BeSman utility will also provide configurable capabilities that would permit the user to configure the tools and dependencies to be pre-bundled in the environment. Individuals will have complete control into what goes into building and provisioning the environment. The base BeSman environment can be customized further to address specific project needs. This gives lot of flexibility to the developer / security tester to optimize their work environment in a seamless manner.","title":"Be-Secure Projects/ Utility:"},{"location":"besec_info/Developers/","text":"Please refer the following link to know more about BeSman. It is built using bash and can be easily customized to provision new environments for an open source tech stack based on open source project requirements. Anyone can leverage BeSman utility to build customized environments for their projects. You can set up BeSman utility by following the steps mentioned in the Readme file. You can raise an issue once you encounter any issue with using available Besman environment scripts or using BeSman utility, we will be glad to help address the issue for you. If you are interested to resolving identified issues with the known list of BeSman environment or BeSman utility, you can raise a pull request with the required fixes. We value your contributions.","title":"Developers"},{"location":"besec_info/Documentation/","text":"Current Software Development life cycle SDLC is a process followed for a software project, within a software organization. It consists of a detailed plan describing how to develop, maintain, replace and alter or enhance specific software. The life cycle defines a methodology for improving the quality of software and the overall development process. Future Development life cycle. Reasearch and analysis is ongoing on this topic. TBD","title":"Documentation"},{"location":"besec_info/Documentation/#current-software-development-life-cycle","text":"SDLC is a process followed for a software project, within a software organization. It consists of a detailed plan describing how to develop, maintain, replace and alter or enhance specific software. The life cycle defines a methodology for improving the quality of software and the overall development process.","title":"Current Software Development life cycle"},{"location":"besec_info/Documentation/#future-development-life-cycle","text":"Reasearch and analysis is ongoing on this topic. TBD","title":"Future Development life cycle."},{"location":"besec_info/be-Secure-introduction/","text":"Be-Secure is an umbrella of open source security projects and utilities driven as a community initiative by Wipro. There has been an increase in adoption of open source software by organizations which in turn has led communities to driving newer open source projects. Today open source is the way forward to develop new capabilities by consuming and collaborating with open source community projects. Given the rate of consumption of open source projects, focus on security is important to help consumers to adopt these projects in a seamless manner and enhance / build bigger business capabilities that are more secure by consuming them. The Be-Secure projects are focused on addressing the common security requirements of open source projects. Further customizations on these Be-Secure projects are possible to address specific security requirements. These security projects and utilities will be tracked by Wipro and its network of trusted security partners. This approach will help to build a security community around open source. The security community through collaboration with open source communities can help identify and remediate security issues with a quicker turn around. This focus and collaboration will help secure open source projects and reduce security incidents occurring with open source software components. There are lot many open source tech stacks out there in the world today. An individual will have a wide variety of open source technologies to choose from for their project needs. Each open source technology has its own security stature. Often this may not be factored in while deciding on the tech stack for an open source project. Considerable effort is spent during development phase to address the security issues. This effort can be reduced if the security of open source technologies / open source project is identified and addressed before it is being consumed. As the first stage of Be-Secure projects, the focus is currently set on the most popular open source tech stacks. These tech stacks have been grouped into 5 different open source security tech stack categories. This approach will help to focus and drive security projects/ utilities more efficiently by addressing the specific security requirements of these tech stacks. The different open source security tech stacks that has been identified based on the characteristics and type of usage are \u2013 Security of DevOps Tool stack Language and framework security stack Applications security stack Distributed application / blockchain security stack Open source security tool security stack The vision for Be-Secure community initiative is to be one stop for all interested individuals to contribute and consume security projects to address security needs of open source projects. We hope this initiative will help enable and equip community members to factor in security for their open source projects right from inception thus reducing the effort on addressing security issues due to these projects in the downstream. All source code for Be-Secure projects are in GitHub under Be-Secure Be-Secure Projects/ Utility: BeSman One of the first utilities to be created as part of Be-Secure project is BeSman. BeSman \u2013 is a command-line utility to provision customized environments for each open source tech stack. These environments are known as BeSman environments. We have two types of BeSman environments \u2013 dev and sec environments. The development environment is pre-bundled with all tools and dependencies that a developer would need to work on a specific open source project. Similarly, the sec environments are pre-bundled with a set of open source security tools that a security tester Why do we need BeSman utility: Individuals spend considerable effort to set up and configure the open source project in their local environment to evaluate it / commence working on it. At times individual run into configuration issues or set up issues which results in them spending more effort to resolve them. This is a sizeable effort that is spent just to get the environment up as compared to the effort spent to build newer capability using an existing open source project. This is a lean effort that should be managed in a better way. How can BeSman utility help: BeSman environments are pre-bundled with tools and dependencies for a specific open project and it can be provisioned using simple bash shell commands from BeSman utility. BeSman utility will also provide configurable capabilities that would permit the user to configure the tools and dependencies to be pre-bundled in the environment. Individuals will have complete control into what goes into building and provisioning the environment. The base BeSman environment can be customized further to address specific project needs. This gives lot of flexibility to the developer / security tester to optimize their work environment in a seamless manner.","title":"Home"},{"location":"besec_info/be-Secure-introduction/#be-secure-projects-utility","text":"BeSman One of the first utilities to be created as part of Be-Secure project is BeSman. BeSman \u2013 is a command-line utility to provision customized environments for each open source tech stack. These environments are known as BeSman environments. We have two types of BeSman environments \u2013 dev and sec environments. The development environment is pre-bundled with all tools and dependencies that a developer would need to work on a specific open source project. Similarly, the sec environments are pre-bundled with a set of open source security tools that a security tester Why do we need BeSman utility: Individuals spend considerable effort to set up and configure the open source project in their local environment to evaluate it / commence working on it. At times individual run into configuration issues or set up issues which results in them spending more effort to resolve them. This is a sizeable effort that is spent just to get the environment up as compared to the effort spent to build newer capability using an existing open source project. This is a lean effort that should be managed in a better way. How can BeSman utility help: BeSman environments are pre-bundled with tools and dependencies for a specific open project and it can be provisioned using simple bash shell commands from BeSman utility. BeSman utility will also provide configurable capabilities that would permit the user to configure the tools and dependencies to be pre-bundled in the environment. Individuals will have complete control into what goes into building and provisioning the environment. The base BeSman environment can be customized further to address specific project needs. This gives lot of flexibility to the developer / security tester to optimize their work environment in a seamless manner.","title":"Be-Secure Projects/ Utility:"},{"location":"besec_info/checklist/","text":"Sl.No Checkpoints A Naming Convention A.1 All Command files will have a prefix besman-XXXX.sh and XXXX must be the command name A.2 All Environment files will have a prefix besman-XXXXX.sh and XXXXX must be the environment name A.3 All Internal besman functions that will be called in other bes scripts must begin with __bes A.4 All function names should have meaningful names which denote what they are intended to do A.5 All besman environment scripts should have standard set of functions included in them and follow the following naming convention __bes_XXXX_YYYY() function where XXXX is the corresponding command and YYYY is the environment name For example, if the environment name is \"yyyy\", then the corresponding commands would look like:- __besman_install_yyyy() __besman_uninstall_yyyy() __besman_update_yyyy() __besman_upgrade_yyyy() __besman_validate_yyyy() __besman_start_yyyy() __besman_stop_yyyy() B Variable definition Scoping B.1 All environment variables should be in caps (eg besman_VERSION) B.2 All export variables used in a script should be initiatlized in besman-init.sh B.3 The environment variables should be invoked using export (in the beginning of the script) if they are intended to be used as is in the script B.4 All local variables should be in small letters (eg argument(1)) B.5 The scope of local variables newly introduced should be confined to the functions they are defined in or within the script they have been defined B.6 Any variable defined in a script which is to be reused in another script should be defined as Environment Variable C Function Usage C.1 __besman_echo function should be used instead of echo to display messages in the script C.2 __besman_echo_debug function should be used to display specific error message in the script C.3 Functions to return -1 if they encounter any error during execution or don't satisfy the condition being validated or processed C.4 Return code from function execution other than 0 to be processed for exiting from script D Test Scripts D.1 All command scripts should have their correspondiing test scripts available for verification purpose and be made available along with code changes during code submission D.2 All environment scripts should have their corresponding test scripts available for verification purpose and be made available along with code changes during code submission D.3 All test scripts should have the following standard set of functions included in them :\u2013 test_bes_init() test_bes_execute() test_bes_validate() test_bes_cleanup() __ test_bes_run() E Raising Pull Request E.1 Pull request should be raised only after the code has been tested in the local environment by the developer, code reviewed feedback comments closed by the developer E.2 Code reviewers should raise pull request against the developer's repository to share feedback comments E.3 Proper comments should be given explaining the changes in the code at a high level while raising the pull request E.4 Verify if code can be optimized further - * Remove indented if else loops with appropriate case statements * Group lines of code into a function (if they are intended to achieve a specific objective) * Reuse of existing defined functions than creating newer functions","title":"Checklist"},{"location":"besec_info/contribute/","text":"We love your input! We want to make contributing to this project as easy and transparent as possible, whether it's: Reporting a bug Discussing the current state of the code Proposing new features Becoming a maintainer We Develop with Github We use github to host code, to track issues and feature requests, as well as accept pull requests. We Use Github Flow , So All Code Changes Happen Through Pull Requests Pull requests are the best way to propose changes to the codebase (we use Github Flow ). We actively welcome your pull requests: Fork the repo and create your branch from master . If you've added code that should be tested, add tests. Ensure the test suite passes. Make sure your code lints. Issue that pull request! Report bugs using Github's issues We use GitHub issues to track public bugs. Report a bug by opening a new issue ; it's that easy! Great Bug Reports tend to have: A quick summary and/or background Steps to reproduce Be specific! Give sample code snapshots if you can. What you expected would happen What actually happens Notes (possibly including why you think this might be happening, or stuff you tried that didn't work) People love thorough bug reports. Processes expected to follow by each contributors: Process for pull request Process for issues Use a Consistent Coding Style You must follow the coding standard described in the BeSman review Checklist . License Any contributions you make will be under the Apache License 2.0 Software License. In short, when you submit code changes, your submissions are understood to be under the same Apache License 2.0 that covers the project. Feel free to contact the maintainers if that's a concern. By contributing, you agree that your contributions will be licensed under its Apache License 2.0.","title":"Contribute"},{"location":"besec_info/contribute/#we-develop-with-github","text":"We use github to host code, to track issues and feature requests, as well as accept pull requests. We Use Github Flow , So All Code Changes Happen Through Pull Requests Pull requests are the best way to propose changes to the codebase (we use Github Flow ). We actively welcome your pull requests: Fork the repo and create your branch from master . If you've added code that should be tested, add tests. Ensure the test suite passes. Make sure your code lints. Issue that pull request!","title":"We Develop with Github"},{"location":"besec_info/contribute/#report-bugs-using-githubs-issues","text":"We use GitHub issues to track public bugs. Report a bug by opening a new issue ; it's that easy! Great Bug Reports tend to have: A quick summary and/or background Steps to reproduce Be specific! Give sample code snapshots if you can. What you expected would happen What actually happens Notes (possibly including why you think this might be happening, or stuff you tried that didn't work) People love thorough bug reports.","title":"Report bugs using Github's issues"},{"location":"besec_info/contribute/#processes-expected-to-follow-by-each-contributors","text":"Process for pull request Process for issues","title":"Processes expected to follow by each contributors:"},{"location":"besec_info/contribute/#use-a-consistent-coding-style","text":"You must follow the coding standard described in the BeSman review Checklist .","title":"Use a Consistent Coding Style"},{"location":"besec_info/contribute/#license","text":"Any contributions you make will be under the Apache License 2.0 Software License. In short, when you submit code changes, your submissions are understood to be under the same Apache License 2.0 that covers the project. Feel free to contact the maintainers if that's a concern. By contributing, you agree that your contributions will be licensed under its Apache License 2.0.","title":"License"},{"location":"besec_info/faq/","text":"How can I contribute to Be-Secure Projects? If you are interested to know more or want to contribute, we would love to hear from you. Please see our detailed documentation releated to Be-Secure project. How do I raise issues? All reference stack codebases and documentation are in github Be-Secure . You can rasie them as issues against each repositories. Thank you for helping us making the reference stack better. How do I raise pull requests? You can make this project attractive and feature rich using your pull requests. Please find the guideline to raise pull request here How do I raise a request to provision a new BeSman environment for a particular open source tech stack? TBD","title":"FAQ"},{"location":"besec_info/faq/#how-can-i-contribute-to-be-secure-projects","text":"If you are interested to know more or want to contribute, we would love to hear from you. Please see our detailed documentation releated to Be-Secure project.","title":"How can I contribute to Be-Secure Projects?"},{"location":"besec_info/faq/#how-do-i-raise-issues","text":"All reference stack codebases and documentation are in github Be-Secure . You can rasie them as issues against each repositories. Thank you for helping us making the reference stack better.","title":"How do I raise issues?"},{"location":"besec_info/faq/#how-do-i-raise-pull-requests","text":"You can make this project attractive and feature rich using your pull requests. Please find the guideline to raise pull request here","title":"How do I raise pull requests?"},{"location":"besec_info/faq/#how-do-i-raise-a-request-to-provision-a-new-besman-environment-for-a-particular-open-source-tech-stack","text":"TBD","title":"How do I raise a request to provision a new BeSman environment for a particular open source tech stack?"},{"location":"besec_info/license/","text":"Be-Secure Project is Apache 2.0 licensed. In short, when you submit code changes, your submissions are understood to be under the same Apache License 2.0 that covers the project. Feel free to contact the maintainers if that is a concern. By contributing, please ensure that you accept the Developer\u2019s Certificate Origin that will be available as part of your pull request.","title":"Licence"},{"location":"besec_info/raise_issue/","text":"Process for raising an issue Before raising an issue the contributor should follow the listed steps: Issue should have an accepted RF number approved by the team. Issue should be raised in Be-Secure's issue section Must provide with snapshots if necessary Each issue should be tracked down and closed by the assignee . Recommended to mark checklist of the issue template before submitting","title":"Process for raising an issue"},{"location":"besec_info/raise_issue/#process-for-raising-an-issue","text":"Before raising an issue the contributor should follow the listed steps: Issue should have an accepted RF number approved by the team. Issue should be raised in Be-Secure's issue section Must provide with snapshots if necessary Each issue should be tracked down and closed by the assignee . Recommended to mark checklist of the issue template before submitting","title":"Process for raising an issue"},{"location":"besec_info/raise_pull_request/","text":"Process to raise a pull request Pull request from developer's point of view It is recommended to create a new branch in developer's local github repository for working on new code changes/features . Once developer's code change has completed the developer should make a pull request to any other contributor's recommended branch to testing the code out based on the checklist . A developer is recommeded to follow the listed steps , for successful merge of their code pull requests. step 1: For avoiding future merge conflicts sync your master repository with Be-Secure/master. step 2: Sync you local master branch with remote branch master (recommended) step 3: create a new branch from synced master branch with assigned (optional eg: RF-xxxx ) step 4: Should work on the newly created branch mentioned in step 3 step 5: Once the work is done make a pull request from branch mentioned in step 3 to contributors specified branch. Pull request from code reviewer's point of view The contributor merges the isolated code change pull request to the local branch created specifically for this code review. and tests out the functionalty,do a thorough review based on the checklist provided by the team Be-Secure . Once the the contributor feels like the code is functional , and it satisfies the checklist they should provide a LGTM approval in the hyperledgerkochi/KOBman's pull section . Only then the code gets merged to Be-Secure's github master repository . A code reviewer is recommeded to follow the listed steps , before providing LGTM approval. step 1: Merge the pull request to new_branch created specifically for testing the code changes in this pull request (new_branch should be synced with Be-Secure/master ) step 3: Once merged need to test it out by releasing a local version and install/test kob utility from the code reviewers local system. step 4: If the functionality is working as expected , do thorough code review based on checklist step 5: Finally if the code passes the checklist , give a LGTM approval other recommended steps: step : The title of the pull request should match the issue raised related to the same. step : The pull request template is to be filled in before submission, ensuring that it is linked back to the Github Issue number by replacing #XXX with the appropriate Issue reference. step : Each pull request should also be accompanied by a passing test(s) proving it's validity (where feasible).","title":"Raise pull request"},{"location":"besec_info/raise_pull_request/#process-to-raise-a-pull-request","text":"","title":"Process to raise a pull request"},{"location":"besec_info/raise_pull_request/#pull-request-from-developers-point-of-view","text":"It is recommended to create a new branch in developer's local github repository for working on new code changes/features . Once developer's code change has completed the developer should make a pull request to any other contributor's recommended branch to testing the code out based on the checklist . A developer is recommeded to follow the listed steps , for successful merge of their code pull requests. step 1: For avoiding future merge conflicts sync your master repository with Be-Secure/master. step 2: Sync you local master branch with remote branch master (recommended) step 3: create a new branch from synced master branch with assigned (optional eg: RF-xxxx ) step 4: Should work on the newly created branch mentioned in step 3 step 5: Once the work is done make a pull request from branch mentioned in step 3 to contributors specified branch.","title":"Pull request from developer's point of view"},{"location":"besec_info/raise_pull_request/#pull-request-from-code-reviewers-point-of-view","text":"The contributor merges the isolated code change pull request to the local branch created specifically for this code review. and tests out the functionalty,do a thorough review based on the checklist provided by the team Be-Secure . Once the the contributor feels like the code is functional , and it satisfies the checklist they should provide a LGTM approval in the hyperledgerkochi/KOBman's pull section . Only then the code gets merged to Be-Secure's github master repository . A code reviewer is recommeded to follow the listed steps , before providing LGTM approval. step 1: Merge the pull request to new_branch created specifically for testing the code changes in this pull request (new_branch should be synced with Be-Secure/master ) step 3: Once merged need to test it out by releasing a local version and install/test kob utility from the code reviewers local system. step 4: If the functionality is working as expected , do thorough code review based on checklist step 5: Finally if the code passes the checklist , give a LGTM approval","title":"Pull request from code reviewer's point of view"},{"location":"besec_info/raise_pull_request/#other-recommended-steps","text":"step : The title of the pull request should match the issue raised related to the same. step : The pull request template is to be filled in before submission, ensuring that it is linked back to the Github Issue number by replacing #XXX with the appropriate Issue reference. step : Each pull request should also be accompanied by a passing test(s) proving it's validity (where feasible).","title":"other recommended steps:"},{"location":"besec_info/techstack_details/","text":"BeSman environments: Techstack 1: DevOps Tool All are in requriment gathering and analysis Phase (R G A) Ansible Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env Status 01 bes-ansibledev-env Python, Ruby, bash, ansible-galaxy Git, Python, Pypi, VScode, Jenkin, Ansible-galaxy R G A 02 bes-ansiblesec-env Java, Jenkin, bes-appsastsec-env, Python, Pypi R G A Chef Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env Status 01 bes-chefdev-env Ruby (client) and Ruby / Erlang (server) Git, RVM, Ruby, Erlang, VSCode, ChefSpec, Jenkin R G A 02 bes-chefsec-env Git, RVM, bes-appsastsec-env, bes-appdastsec-env R G A Techstack 2: Language and Framework security Python-Django Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env Status 01 bes-pythonDjangodev-env Git, Python, VSCode, pytest, jenkins R G A 02 bes-pythonDjangosec-env Git, bes-appsastsec-env, bes-pensec-env, Pypi, Python R G A Java-Spring Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env Status 01 bes-javaSpringdev-env Git, openJDK, Apache Maven, Junit, Selenium, Jenkins R G A 02 bes-javaSpringsec-env Git, openJDK, bes-appsastsec-env, bes-pensec-env, R G A Techstack 3: Application security Drupal Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env Status 01 bes-drupaldev-env TBD R G A 02 bes-drupalsec-env TBD, bes-appsastsec-env, bes-appdastsec-env, bes-pensec-env R G A Odoo Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env Status 01 bes-odoodev-env TBD R G A 02 bes-odoosec-env TBD, bes-appsastsec-env, bes-appdastsec-env, bes-pensec-env R G A Techstack 4: Distributed Application or Blockchain Security Hyperledger Indy Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env Status 01 bes-hyperledgerIndydev-env Git, Python, Pypi, VSCode, Indy-node, Indy-sdk, crypto, Jenkins R G A 02 bes-hyperledgerIndysec-env TBD, bes-appsastsec-env, bes-appdastsec-env, bes-pensec-env, Git R G A Hyperledger Fabric Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env Status 01 bes-hyperledgerFabricdev-env Git, Go, NPM, Docker, NodeJS, Jnekins, Docker compose, VSCode R G A 02 bes-hyperledgerFabricsec-env Git, Go, bes-appsastsec-env, bes-appdastsec-env, NPM, Docker R G A Techstack 5: Open Source Security Tool Security Application Security Testing (SAST ) Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env Status 01 bes-appsastsec-env SAST-LGTM, Sonarqube, Semgrep, Gosec, OpenVAS, Vega, Grabber R G A Application Security Testing (DAST) Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env Status 01 bes-pensec-env DAST - ZAP, GoLismero, Metasploit, Burp Suite CE R G A Penetration Testing Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env Status 01 bes-pensec-env Kali Linux, Parrot Sec R G A","title":"Techstack details"},{"location":"besec_info/techstack_details/#besman-environments","text":"","title":"BeSman environments:"},{"location":"besec_info/techstack_details/#techstack-1-devops-tool","text":"All are in requriment gathering and analysis Phase (R G A) Ansible Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env Status 01 bes-ansibledev-env Python, Ruby, bash, ansible-galaxy Git, Python, Pypi, VScode, Jenkin, Ansible-galaxy R G A 02 bes-ansiblesec-env Java, Jenkin, bes-appsastsec-env, Python, Pypi R G A Chef Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env Status 01 bes-chefdev-env Ruby (client) and Ruby / Erlang (server) Git, RVM, Ruby, Erlang, VSCode, ChefSpec, Jenkin R G A 02 bes-chefsec-env Git, RVM, bes-appsastsec-env, bes-appdastsec-env R G A","title":"Techstack 1:  DevOps Tool"},{"location":"besec_info/techstack_details/#techstack-2-language-and-framework-security","text":"Python-Django Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env Status 01 bes-pythonDjangodev-env Git, Python, VSCode, pytest, jenkins R G A 02 bes-pythonDjangosec-env Git, bes-appsastsec-env, bes-pensec-env, Pypi, Python R G A Java-Spring Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env Status 01 bes-javaSpringdev-env Git, openJDK, Apache Maven, Junit, Selenium, Jenkins R G A 02 bes-javaSpringsec-env Git, openJDK, bes-appsastsec-env, bes-pensec-env, R G A","title":"Techstack 2:  Language and Framework security"},{"location":"besec_info/techstack_details/#techstack-3-application-security","text":"Drupal Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env Status 01 bes-drupaldev-env TBD R G A 02 bes-drupalsec-env TBD, bes-appsastsec-env, bes-appdastsec-env, bes-pensec-env R G A Odoo Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env Status 01 bes-odoodev-env TBD R G A 02 bes-odoosec-env TBD, bes-appsastsec-env, bes-appdastsec-env, bes-pensec-env R G A","title":"Techstack 3:  Application security"},{"location":"besec_info/techstack_details/#techstack-4-distributed-application-or-blockchain-security","text":"Hyperledger Indy Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env Status 01 bes-hyperledgerIndydev-env Git, Python, Pypi, VSCode, Indy-node, Indy-sdk, crypto, Jenkins R G A 02 bes-hyperledgerIndysec-env TBD, bes-appsastsec-env, bes-appdastsec-env, bes-pensec-env, Git R G A Hyperledger Fabric Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env Status 01 bes-hyperledgerFabricdev-env Git, Go, NPM, Docker, NodeJS, Jnekins, Docker compose, VSCode R G A 02 bes-hyperledgerFabricsec-env Git, Go, bes-appsastsec-env, bes-appdastsec-env, NPM, Docker R G A","title":"Techstack  4:  Distributed Application or Blockchain Security"},{"location":"besec_info/techstack_details/#techstack-5-open-source-security-tool-security","text":"Application Security Testing (SAST ) Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env Status 01 bes-appsastsec-env SAST-LGTM, Sonarqube, Semgrep, Gosec, OpenVAS, Vega, Grabber R G A Application Security Testing (DAST) Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env Status 01 bes-pensec-env DAST - ZAP, GoLismero, Metasploit, Burp Suite CE R G A Penetration Testing Sl.No BeSman Env name Dependencies Entities Prebundled in besman Env Status 01 bes-pensec-env Kali Linux, Parrot Sec R G A","title":"Techstack 5: Open Source Security Tool Security"},{"location":"besec_info/techstack_introduction/","text":"Open source Security tech stacks: We have grouped various open source technologies into 5 main categories. By doing so, it will help us to device appropriate security measures and processes to enhance the security of these open source tech stacks. We should be able to accommodate almost all the existing open source technologies in any one of the 5 categories. The categories are defined based on the common characteristics and usage of the respective open source technologies. There are two environment for each tools defined under each stack: 1. bes- TOOL dev-env 2. bes- TOOL esec-env bes- dev-env In this environment user will get all tools to develup that partikular tool or tools using that tool bes- sec-env Under this environment, user will be armed with many security tools, to perform security testing of the techstack tool. At present, All tech stack and related applications are under Requirement gathering and analysis phase (R G A) Once Requirement gathering and analysis phase completed, each tech stack will be updated with another column named security status which indicates the current security vulnarabilities and fix status of that application. At a glance At the moment, there are 5 broad classification made on the Open Source tools/project, each section is called a tech stack. These includes DevOps Tool Security Language and Framework security Application security Distributed Application or Blockchain Security Open Source Security Tool Security DevOps techstack consists of 6 applications with 12 environments. These applications includes, Ansible, Chef, Puppet, Docker, Kubernetes and Openshift. At present these are in Reasearch and Development stage (R D) Application count is almost 11 with Language and Framework section, which accounts for 22 environments. Currently we have idnetified 8 application in application category with 16 environemnts. In aggregate, there are 5 tech stacks with 40+ environments are under Reasearch and Development stage.","title":"Tech stack data collection"},{"location":"besec_info/techstack_introduction/#open-source-security-tech-stacks","text":"We have grouped various open source technologies into 5 main categories. By doing so, it will help us to device appropriate security measures and processes to enhance the security of these open source tech stacks. We should be able to accommodate almost all the existing open source technologies in any one of the 5 categories. The categories are defined based on the common characteristics and usage of the respective open source technologies. There are two environment for each tools defined under each stack: 1. bes- TOOL dev-env 2. bes- TOOL esec-env bes- dev-env In this environment user will get all tools to develup that partikular tool or tools using that tool bes- sec-env Under this environment, user will be armed with many security tools, to perform security testing of the techstack tool. At present, All tech stack and related applications are under Requirement gathering and analysis phase (R G A) Once Requirement gathering and analysis phase completed, each tech stack will be updated with another column named security status which indicates the current security vulnarabilities and fix status of that application.","title":"Open source Security tech stacks:"},{"location":"besec_info/techstack_introduction/#at-a-glance","text":"At the moment, there are 5 broad classification made on the Open Source tools/project, each section is called a tech stack. These includes DevOps Tool Security Language and Framework security Application security Distributed Application or Blockchain Security Open Source Security Tool Security DevOps techstack consists of 6 applications with 12 environments. These applications includes, Ansible, Chef, Puppet, Docker, Kubernetes and Openshift. At present these are in Reasearch and Development stage (R D) Application count is almost 11 with Language and Framework section, which accounts for 22 environments. Currently we have idnetified 8 application in application category with 16 environemnts. In aggregate, there are 5 tech stacks with 40+ environments are under Reasearch and Development stage.","title":"At a glance"},{"location":"besec_info/wiki/","text":"Reasearch and analysis is ongoing on this topic. TBD","title":"WIKI"}]}